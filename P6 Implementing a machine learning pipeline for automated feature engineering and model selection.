!pip install scikit-learn tpot feature-engine pandas numpy 
# Step 1: Import necessary libraries

import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import StandardScaler
from tpot import TPOTClassifier # For automated model selection 
from feature_engine.imputation import MeanMedianImputer
from sklearn.metrics import accuracy_score

# Step 2: Load the dataset
# For this example, we'll use a publicly available dataset (e.g., the Iris dataset)
from sklearn.datasets import load_iris 
data = load_iris()
X = pd.DataFrame(data.data, columns=data.feature_names) 
y = pd.Series(data.target)

# Step 3: Preprocess the data
# Handle missing values (if any) using mean imputation 
imputer = MeanMedianImputer()
X_imputed = imputer.fit_transform(X)

# Step 4: Encoding categorical variables (skip this step for the Iris dataset since it has no categorical variables)

# Step 5: Feature scaling (standardize the data) 
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

# Step 6: Split the data into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 7: Automated Model Selection with TPOT
# TPOT will try several models and find the best pipeline.
tpot = TPOTClassifier(verbosity=2, generations=5, population_size=20, random_state=42)
tpot.fit(X_train, y_train)

# Step 8: Evaluate the model 
y_pred = tpot.predict(X_test)
print("Accuracy Score: ", accuracy_score(y_test, y_pred))

# Step 9: Export the best pipeline (optional) 
tpot.export('best_model_pipeline.py')

# Step 10: Use the best pipeline for prediction (optional) 
best_model = tpot.fitted_pipeline_
best_predictions = best_model.predict(X_test) 
print("Best Model Predictions: ", best_predictions)
