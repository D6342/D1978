•	Create tensors with different shapes and data types. 

import numpy as np

# 1D Vector (int)
x = np.array([2, 4, 6], dtype=np.int32)
y = np.array([1, 3, 5], dtype=np.int32)

# 2D Matrix (float)
matrix = np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float64)

# 3D Tensor (complex)
tensor = np.array([[[1+2j, 3+4j], [5+6j, 7+8j]]], dtype=np.complex128)

# Add x and y
z = np.add(x, y)

# Display everything
print("x:", x, "Shape:", x.shape, "Dtype:", x.dtype)
print("y:", y, "Shape:", y.shape, "Dtype:", y.dtype)
print("z = x + y:", z, "Shape:", z.shape, "Dtype:", z.dtype)
print("2D Matrix:\n", matrix, "Shape:", matrix.shape, "Dtype:", matrix.dtype)
print("3D Tensor:\n", tensor, "Shape:", tensor.shape, "Dtype:", tensor.dtype)


•	Perform basic operations like addition, subtraction, multiplication, and division on tensors.

import numpy as np

# Define two 2D tensors (matrices)
A = np.array([[2, 4], [6, 8]], dtype=np.float32)
B = np.array([[1, 2], [3, 4]], dtype=np.float32)

# Addition
add_result = np.add(A, B)

# Subtraction
sub_result = np.subtract(A, B)

# Element-wise Multiplication
mul_result = np.multiply(A, B)

# Element-wise Division
div_result = np.divide(A, B)

# Display the results
print("A:\n", A)
print("B:\n", B)
print("\nAddition (A + B):\n", add_result)
print("\nSubtraction (A - B):\n", sub_result)
print("\nMultiplication (A * B):\n", mul_result)
print("\nDivision (A / B):\n", div_result)


•	Reshape, slice, and index tensors to extract specific elements or sections.

import numpy as np

# Create a 1D tensor and reshape it to 2D
tensor = np.arange(1, 13).reshape(3, 4)
print("Original Tensor:\n", tensor)

# Indexing: Get element at row 1, column 2
print("\nElement at (1,2):", tensor[1, 2])

# Slicing: Get the first two rows and first three columns
print("\nSliced Tensor (first 2 rows, first 3 cols):\n", tensor[:2, :3])

# Extract a specific row
print("\nSecond Row:", tensor[1])

# Extract a specific column
print("\nThird Column:", tensor[:, 2])


•	Performing matrix multiplication and finding eigenvectors and eigenvalues using TensorFlow

#Eigen value using tensorflow
import tensorflow as tf
x = tf.constant([1,2,3,4,5,6], shape = [2,3])
print(x)

y = tf.constant([7,8,9,10,11,12],shape = [3,2])
print(y)

z = tf.matmul(x,y)
print("Product: /n/n/n", z)

e_Matrix_A = tf.random.uniform([2,2], minval=3, maxval=10, dtype=tf.float32,name="matrixA")
print("Matrix A= /n/n/n", e_Matrix_A)

eigen_values_A, eigen_vector_A = tf.linalg.eigh(e_Matrix_A)
print("Eigen value of A /n/n/n", eigen_values_A)
print("Eigen vector of A /n/n/n", eigen_vector_A)
